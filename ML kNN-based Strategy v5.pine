// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© capissimo

//@version=5
indicator('ML kNN-based Strategy v5', '', true, max_bars_back = 5000, max_lines_count=400, max_labels_count=400)

// kNN-based Strategy (FX and Crypto)
// Description: 

/////////////////////////////////////////////////////////////////////////////////
// This update to the popular kNN-based strategy features:
//     improvements in the business logic,
//     an adjustible k value for the kNN model, 
//     one more feature (MOM),
//     a streamlined signal filter and 
//     some other minor fixes.
//
// Now this script works in all timeframes !
//
// I intentionally decided to publish this script separately 
// in order for the users to see the differences.
/////////////////////////////////////////////////////////////////////////////////

// This strategy uses a classic machine learning algorithm - k Nearest Neighbours (kNN) - 
// to let you find a prediction for the next (tomorrow's, next month's, etc.) market move. 
// Being an unsupervised machine learning algorithm, kNN is one of the most simple learning algorithms. 

// To do a prediction of the next market move, the kNN algorithm uses the historic data, 
// collected in 3 arrays - feature1, feature2 and directions, - and finds the k-nearest 
// neighbours of the current indicator(s) values. 

// The two dimensional kNN algorithm just has a look on what has happened in the past when 
// the two indicators had a similar level. It then looks at the k nearest neighbours, 
// sees their state and thus classifies the current point.

// The kNN algorithm offers a framework to test all kinds of indicators easily to see if they 
// have got any *predictive value*. One can easily add cog, wpr and others.
// Note: TradingViews's playback feature helps to see this strategy in action.

// Style tags: Trend Following, Trend Analysis
// Asset class: Equities, Futures, ETFs, Currencies and Commodities
// Dataset: FX Minutes/Hours+++/Days

//-------------------- Inputs

K = input.int(63, 'K Value for kNN Model |5..n|', minval=5)
ind = input.string('All', 'Indicator', options=['RSI', 'ROC', 'CCI', 'MOM', 'All'])
fast = input.int(14, 'Fast Period |1..n|', minval=1)
slow = input.int(28, 'Slow Period |2..n|', minval=2)
ftype = input.string('Both', 'Filter Signals by', options=['Volatility', 'Volume', 'Both', 'None'])
holding_p = input.int(1, 'Holding Period |1..n|', minval=1)
tthres = input.float(99.9, 'Time Threshold |0.1..100.0|', minval=0.0, maxval=100.0, step=0.1)

//-------------------- Global Variables

var int BUY = 1
var int SELL = -1
var int HOLD = 0
var int hp_counter = 0

var float k = math.floor(math.sqrt(K))

//-------------------- Custom Functions

cAqua(g) =>
    g > 9 ? #0080FFff : g > 8 ? #0080FFe5 : g > 7 ? #0080FFcc : g > 6 ? #0080FFb2 : g > 5 ? #0080FF99 : g > 4 ? #0080FF7f : g > 3 ? #0080FF66 : g > 2 ? #0080FF4c : g > 1 ? #0080FF33 : #00C0FF19
cPink(g) =>
    g > 9 ? #FF0080ff : g > 8 ? #FF0080e5 : g > 7 ? #FF0080cc : g > 6 ? #FF0080b2 : g > 5 ? #FF008099 : g > 4 ? #FF00807f : g > 3 ? #FF008066 : g > 2 ? #FF00804c : g > 1 ? #FF008033 : #FF008019

volumeBreak(thres) =>
    rsivol = ta.rsi(volume, 14)
    osc = ta.hma(rsivol, 10)
    osc > thres

volatilityBreak(volmin, volmax) =>
    ta.atr(volmin) > ta.atr(volmax)

scale(x, p) =>  //-- scale to the range of [0..1]
    (x - ta.lowest(x, p)) / (ta.highest(x, p) - ta.lowest(x, p))

//-------------------- Logic

// 4 pairs of predictor indicators, long and short each
rs = ta.rsi(close, slow)
rf = ta.rsi(close, fast)
cs = ta.cci(close, slow)
cf = ta.cci(close, fast)
os = ta.roc(close, slow)
of = ta.roc(close, fast)
// added mom as a feature: 
// it requires scaling to the range of [0,...,100]
// the choice of 63 is arbitrary, needs optimizing
ms = scale(ta.mom(close, slow), 63) * 100
mf = scale(ta.mom(close, fast), 63) * 100

// TOADD or TOTRYOUT:
//    cmo(close, slow), cmo(close, fast)
//    mfi(close, slow), mfi(close, fast)
//    mom(close, slow), mom(close, fast)
f1 = ind == 'RSI' ? rs : ind == 'ROC' ? os : ind == 'CCI' ? cs : ind == 'MOM' ? ms : math.avg(rs, os, cs, ms)
f2 = ind == 'RSI' ? rf : ind == 'ROC' ? of : ind == 'CCI' ? cf : ind == 'MOM' ? mf : math.avg(rf, of, cf, mf)

// Classification data, what happens on the next bar
class_1 = close[1] < close[0] ? SELL : close[1] > close[0] ? BUY : HOLD

// Training data, normalized to the range of [0,...,100]
var feature1 = array.new_float(0)  // [0,...,100]
var feature2 = array.new_float(0)  //    ...
var directions = array.new_int(0)  // [-1; +1]

// Result data
var predictions = array.new_int(0)
var prediction = 0.
var signal = HOLD

// Store everything in arrays. Features represent a square 100 x 100 matrix,
// whose row-colum intersections represent class labels, showing historic directions
array.push(feature1, f1)
array.push(feature2, f2)
array.push(directions, class_1)

// Ucomment the followng statement (if barstate.islast) and tab everything below
// between BOBlock and EOBlock marks to see just the recent several signals gradually 
// showing up, rather than all the preceding signals

//if barstate.islast   

//==BOBlock	

// Core logic of the algorithm

size = array.size(directions)
maxdist = -999.

// Loop through the training arrays, getting distances and corresponding directions.
for i = 0 to size - 1 by 1
    // Calculate the euclidean distance of current point to all historic points,
    // here the metric used might as well be a manhattan distance or any other.
    d = math.sqrt(math.pow(f1 - array.get(feature1, i), 2) + math.pow(f2 - array.get(feature2, i), 2))

    if d > maxdist
        maxdist := d
        if array.size(predictions) >= k
            array.shift(predictions)
        array.push(predictions, array.get(directions, i))

//==EOBlock	

// Note: in this setup there's no need for distances array (i.e. array.push(distances, d)),
//       but the drawback is that a sudden max value may shadow all the subsequent values.
// One of the ways to bypass this is to:
// 1) store d in distances array,
// 2) calculate newdirs = bubbleSort(distances, directions), and then 
// 3) take a slice with array.slice(newdirs) from the end

// Get the overall prediction of k nearest neighbours
prediction := array.sum(predictions)

// Now that we got a prediction for the next market move, we need to make use of this prediction and 
// trade it. The returns then will show if everything works as predicted.
// Over here is a simple long/short interpretation of the prediction, 
// but of course one could also use the quality of the prediction (+5 or +1) in some sort of way,
// ex. for position sizing.

tbase = (time - time[1]) / 1000
tcurr = (timenow - time_close[1]) / 1000
barlife = tcurr / tbase

filter = ftype == 'Volatility' ? volatilityBreak(1, 10) : ftype == 'Volume' ? volumeBreak(49) : ftype == 'Both' ? volatilityBreak(1, 10) and volumeBreak(49) : true

signal := prediction > 0 and barlife > tthres and filter ? BUY : prediction < 0 and barlife > tthres and filter ? SELL : nz(signal[1])  // HOLD

changed = ta.change(signal)

hp_counter := changed ? 0 : hp_counter + 1

startLongTrade = changed and signal == BUY
startShortTrade = changed and signal == SELL
endLongTrade = changed and signal == SELL or signal == BUY and hp_counter == holding_p and not changed
endShortTrade = changed and signal == BUY or signal == SELL and hp_counter == holding_p and not changed

//------------------ Rendering

plotshape(startLongTrade ? src : na, 'Buy', shape.triangleup, location.belowbar, color.new(color.lime, 0), size=size.tiny)
plotshape(startShortTrade ? src : na, 'Sell', shape.triangledown, location.abovebar, color.new(color.red, 0), size=size.tiny)
plotshape(endLongTrade ? src : na, 'StopBuy',  shape.flag, location.top, color.new(color.lime, 0), size=size.tiny)
plotshape(endShortTrade ? src : na, 'StopSell', shape.flag, location.bottom, color.new(color.red, 0), size=size.tiny)


//-------------------- Backtesting

lot_size = input.float(1, 'Lot Size', options=[0.01, 0.1, 0.2, 0.3, 0.5, 1, 2, 3, 5, 10, 20, 30, 50, 100, 1000])

//src = (open[1] + close[1] + high[1] + low[1]) / 4
src := ohlc4

var float start_long_trade = 0.
var float long_trades = 0.
var float start_short_trade = 0.
var float short_trades = 0.
var int wins_long = 0
var int wins_short = 0
var int long_trade_count = 0
var int short_trade_count = 0

if startLongTrade
    start_long_trade := src
    start_long_trade

if endLongTrade
    long_trade_count := 1
    diff_long = src - start_long_trade
    wins_long := diff_long > 0 ? 1 : 0
    long_trades := diff_long * lot_size
    long_trades
    
if startShortTrade
    start_short_trade := src
    start_short_trade

if endShortTrade
    short_trade_count := 1
    diff_short = start_short_trade - src
    wins_short := diff_short > 0 ? 1 : 0
    short_trades := diff_short * lot_size
    short_trades

cumreturn_long = ta.cum(long_trades)  //-- cumulative return long
cumreturn_short = ta.cum(short_trades)  //-- cumulative return short
total_long_trades = ta.cum(long_trade_count)
total_short_trades = ta.cum(short_trade_count)
total_wins_long = ta.cum(wins_long)
total_wins_short = ta.cum(wins_short)
total_losses_long = total_long_trades - total_wins_long == 0 ? 1 : total_long_trades - total_wins_long
total_losses_short = total_short_trades - total_wins_short == 0 ? 1 : total_short_trades - total_wins_short


//-------------------- Information

show_info = input(true, 'Show Info?')

tbase = (time - time[1]) / 1000
tcurr = (timenow - time_close[1]) / 1000

var label lbl = na

info = '\nK Value: ' + str.tostring(K, '#') + ' (' + str.tostring(k, '#.##') + ')' + '\nHPeriod: ' + str.tostring(holding_p, '#')
       +'\nCR Long='+str.tostring(cumreturn_long,'#.#') + '\nTrades long: ' + str.tostring(total_long_trades,'#')+'\nWin/Loss: '+ str.tostring(total_wins_long/total_losses_long,'#.##')+'\nWinrate Long: '+str.tostring(total_wins_long/total_long_trades,'#.#%')
       +'\nCR Short='+str.tostring(cumreturn_short,'#.#') + '\nTrades Short: ' + str.tostring(total_short_trades,'#')+'\nWin/Loss: '+ str.tostring(total_wins_short/total_losses_short,'#.##')+'\nWinrate Short: '+str.tostring(total_wins_short/total_short_trades,'#.#%') 
       + '\n\nBar Time: ' + str.tostring(tcurr / tbase, '#.#%')

if show_info and barstate.islast 
    lbl := label.new(bar_index, src, info, xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_label_left, color.white, size.small, text.align_left)
    label.delete(lbl[1])


