//@version=4
// Copyright (c) 2018-present, Alex Orekhov (everget)
// Schaff Trend Cycle script may be freely distributed under the MIT license.
// strategy("Schaff Trend Cycle", shorttitle="STC Backtest", overlay=false)

strategy(title='_testing', commission_type=strategy.commission.percent, commission_value=0.003, 
         initial_capital=10000, overlay=false, 
         default_qty_type=strategy.percent_of_equity, default_qty_value=50,currency=currency.EUR, 
         pyramiding=0, calc_on_every_tick=true,precision=6, max_labels_count=100, max_bars_back=1000)


fastLength = input(title="MACD Fast Length", type=input.integer, defval=13)
slowLength = input(title="MACD Slow Length", type=input.integer, defval=49)
cycleLength = input(title="Cycle Length", type=input.integer, defval=5)
d1Length = input(title="1st %D Length", type=input.integer, defval=3)
d2Length = input(title="2nd %D Length", type=input.integer, defval=3)
src = input(title="Source", type=input.source, defval=close)

highlightBreakouts = input(title="Highlight Breakouts ?", type=input.bool, defval=true)
macd = ema(src, fastLength) - ema(src, slowLength)
k = nz(fixnan(stoch(macd, macd, macd, cycleLength)))
d = ema(k, d1Length)
kd = nz(fixnan(stoch(d, d, d, cycleLength)))
stc = ema(kd, d2Length)
stc := stc > 100 ? 100 : stc < 0 ? 0 : stc


stcColor = not highlightBreakouts ? stc > stc[1] ? color.green : color.red : #ff3013
stcPlot = plot(stc, title="STC", color=stcColor, transp=0)

upper = input(75, defval=75)
lower = input(25, defval=25)

transparent = color.new(color.white, 100)

upperLevel = plot(upper, title="Upper", color=color.gray)
hline(50, title="Middle", linestyle=hline.style_dotted)
lowerLevel = plot(lower, title="Lower", color=color.gray)

fill(upperLevel, lowerLevel, color=#f9cb9c, transp=90)

upperFillColor = stc > upper and highlightBreakouts ? color.green : transparent
lowerFillColor = stc < lower and highlightBreakouts ? color.red : transparent

fill(upperLevel, stcPlot, color=upperFillColor, transp=80)
fill(lowerLevel, stcPlot, color=lowerFillColor, transp=80)
//

highpassLength = input(title="Highpass Period", type=input.integer, defval=125)
upperPercent = input(title="Upper Band % Shift", type=input.float, minval=0, step=0.1, defval=0.5)
lowerPercent = input(title="Lower Band % Shift", type=input.float, minval=0, step=0.1, defval=0.5)
src = input(title="Source", type=input.source, defval=close)
highlightMovements = input(title="Highlight Decycler Movements ?", type=input.bool, defval=true)

PI = 2 * asin(1)

// High-pass Filter
alphaArg = 2 * PI / (highpassLength * sqrt(2))

alpha = 0.0
alpha := cos(alphaArg) != 0 ? (cos(alphaArg) + sin(alphaArg) - 1) / cos(alphaArg) : 
   nz(alpha[1])

hp = 0.0
hp := pow(1 - alpha / 2, 2) * (src - 2 * nz(src[1]) + nz(src[2])) + 
   2 * (1 - alpha) * nz(hp[1]) - pow(1 - alpha, 2) * nz(hp[2])

decycler = src - hp

decyclerColor = highlightMovements ? decycler >= decycler[1] ? color.green : color.red : #741b47
plot(decycler, title="Decycler", linewidth=2, color=decyclerColor, transp=0)

upperBand = (1 + upperPercent / 100) * decycler
lowerBand = (1 - lowerPercent / 100) * decycler

bandColor = #138484
upperBandPlot = plot(upperBand, title="Upper", color=bandColor)
lowerBandPlot = plot(lowerBand, title="Lower", color=bandColor)
fill(upperBandPlot, lowerBandPlot, title="Background", color=color.new(#ffd966, 84))


//
long = crossover(stc, lower) ? lower : na
short = crossunder(stc, upper) ? upper : na

long_filt = long and not short
short_filt = short and not long

prev = 0
prev := long_filt ? 1 : short_filt ? -1 : prev[1]

long_final = long_filt and prev[1] == -1
short_final = short_filt and prev[1] == 1

strategy.entry("long", strategy.long, when=long)
strategy.exit("long", when=short)
strategy.entry("short", strategy.short, when=short)
strategy.exit("short", when=long)


plotshape(crossover(stc, lower) ? lower : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)
plotshape(crossunder(stc, upper) ? upper : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red, transp=0)

alertcondition(long_final, "Long", message="Long")
alertcondition(short_final, "Short", message="Short")

plotshape(long, style=shape.arrowup, text="Long", color=color.green, location=location.belowbar)
plotshape(short, style=shape.arrowdown, text="Short", color=color.red, location=location.abovebar)
