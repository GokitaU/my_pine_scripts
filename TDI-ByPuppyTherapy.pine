//@version=3
study(title="TDI @ByPuppyTherapy", shorttitle="TDI @ByPuppy")
sp_rsi         = input(false, title="⎻⎻⎻⎻⎻⎻  RSI Settings ⎻⎻⎻⎻⎻⎻⎻")
rsiLength      = input(14,    minval=1, title="RSI Length")
rsiOverbought  = input(75,    title="RSI Overbought - Level 2" , type = integer, minval=0, maxval=100)
rsiOverbought1 = input(63,    title="RSI Overbought - Level 1" , type = integer, minval=0, maxval=100)
rsiOversold1   = input(37,    title="RSI Oversold   - Level 1" , type = integer, minval=0, maxval=100)
rsiOversold    = input(25,    title="RSI Oversold   - Level 2" , type = integer, minval=0, maxval=100)
rsiSource      = input(close, title="RSI Source", type = source)

sp_bb          = input(false, title="⎻⎻⎻⎻⎻⎻ TDI BB Settings  ⎻⎻⎻⎻⎻⎻⎻")
bb_length      = input(34,    minval=1, title="BB Length")
bb_type        = input("SMA", title="BB Type", options=["SMA", "EMA", "DEMA", "TEMA", "WMA", "VWMA", "SMMA", "Hull", "LSMA", "ALMA", "KAMA", "MAMA", "ZEMA", "HWMA", "AHMA"], type=string)
lsmaOffset     = input(defval = 1, title = "Least Squares (LSMA) Only - Offset Value", minval = 0)
almaOffset     = input(defval = 0.85, title = "Arnaud Legoux (ALMA) Only - Offset Value", minval = 0, step = 0.01)
almaSigma      = input(defval = 6, title = "Arnaud Legoux (ALMA) Only - Sigma Value", minval = 0)
bb_std         = input(1.682, minval=0, type = float,  title="BB std.")
bb_plus        = input(0.0,   minval=0, type = float,  title="BB +Constant")

sp_ma          = input(false, title="⎻⎻⎻⎻⎻⎻ TDI Signal Setting  ⎻⎻⎻⎻⎻⎻⎻")
rsiSignalLen   = input(34,     minval=1, title="TDI Signal Length ")
rsiSignalType  = input("TEMA", title="BB Type", options=["SMA", "EMA", "DEMA", "TEMA", "WMA", "VWMA", "SMMA", "Hull", "LSMA", "ALMA", "KAMA", "MAMA", "ZEMA", "HWMA", "AHMA"], type=string)
lsmaOffset2    = input(defval = 1, title = "Least Squares (LSMA) Only - Offset Value", minval = 0)
almaOffset2    = input(defval = 0.85, title = "Arnaud Legoux (ALMA) Only - Offset Value", minval = 0, step = 0.01)
almaSigma2     = input(defval = 6, title = "Arnaud Legoux (ALMA) Only - Sigma Value", minval = 0)

sp_sh          = input(false, title="⎻⎻⎻⎻⎻⎻Show/Hide Signals ⎻⎻⎻⎻⎻⎻⎻")

//------ Functions ----- //
kama(src, len)=>
    xvnoise = abs(src - src[1])
    nfastend = 0.666
    nslowend = 0.0645
    nsignal = abs(src - src[len])
    nnoise = sum(xvnoise, len)
    nefratio = iff(nnoise != 0, nsignal / nnoise, 0)
    nsmooth = pow(nefratio * (nfastend - nslowend) + nslowend, 2)
    nAMA = 0.0
    nAMA := nz(nAMA[1]) + nsmooth * (src - nz(nAMA[1]))

mama(src, len)=>
    fl=0.5
    sl=0.05
    pi = 3.1415926
    sp = (4*src + 3*src[1] + 2*src[2] + src[3]) / 10.0
    p  = 0.0
    i2 = 0.0
    q2 = 0.0
    dt = (.0962*sp + .5769*nz(sp[2]) - .5769*nz(sp[4])- .0962*nz(sp[6]))*(.075*nz(p[1]) + .54)
    q1 = (.0962*dt + .5769*nz(dt[2]) - .5769*nz(dt[4])- .0962*nz(dt[6]))*(.075*nz(p[1]) + .54)
    i1 = nz(dt[3])
    jI = (.0962*i1 + .5769*nz(i1[2]) - .5769*nz(i1[4])- .0962*nz(i1[6]))*(.075*nz(p[1]) + .54)
    jq = (.0962*q1 + .5769*nz(q1[2]) - .5769*nz(q1[4])- .0962*nz(q1[6]))*(.075*nz(p[1]) + .54)
    i2_ = i1 - jq
    q2_ = q1 + jI
    i2 := .2*i2_ + .8*nz(i2[1])
    q2 := .2*q2_ + .8*nz(q2[1])
    re_ = i2*nz(i2[1]) + q2*nz(q2[1])
    im_ = i2*nz(q2[1]) - q2*nz(i2[1])
    re = 0.0
    im = 0.0
    re := .2*re_ + .8*nz(re[1])
    im := .2*im_ + .8*nz(im[1])
    p1 = iff(im!=0 and re!=0, 2*pi/atan(im/re), nz(p[1]))
    p2 = iff(p1 > 1.5*nz(p1[1]), 1.5*nz(p1[1]), iff(p1 < 0.67*nz(p1[1]), 0.67*nz(p1[1]), p1))
    p3 = iff(p2<6, 6, iff (p2 > 50, 50, p2))
    p := .2*p3 + .8*nz(p3[1])
    phase = 180/pi * atan(q1 / i1)
    dphase_ = nz(phase[1]) - phase
    dphase = iff(dphase_< 1, 1, dphase_)
    alpha_ = fl / dphase
    alpha = iff(alpha_ < sl, sl, iff(alpha_ > fl, fl, alpha_))
    mama = 0.0
    mama := alpha*src + (1 - alpha)*nz(mama[1])
    
t3(src, len)=>
    xe1_1 = ema(src,    len)
    xe2_1 = ema(xe1_1,  len)
    xe3_1 = ema(xe2_1,  len)
    xe4_1 = ema(xe3_1,  len)
    xe5_1 = ema(xe4_1,  len)
    xe6_1 = ema(xe5_1,  len)
    b_1 = 0.7
    c1_1 = -b_1*b_1*b_1
    c2_1 = 3*b_1*b_1+3*b_1*b_1*b_1
    c3_1 = -6*b_1*b_1-3*b_1-3*b_1*b_1*b_1
    c4_1 = 1+3*b_1+b_1*b_1*b_1+3*b_1*b_1
    nT3Average_1 = c1_1 * xe6_1 + c2_1 * xe5_1 + c3_1 * xe4_1 + c4_1 * xe3_1
    
// The general form of the weights of the (2m + 1)-term Henderson Weighted Moving Average
getWeight(m, j) =>
    numerator = 315 * (pow(m + 1, 2) - pow(j, 2)) * (pow(m + 2, 2) - pow(j, 2)) * (pow(m + 3, 2) - pow(j, 2)) * (3 * pow(m + 2, 2) - 11 * pow(j, 2) - 16)
    denominator = 8 * (m + 2) * (pow(m + 2, 2) - 1) * (4 * pow(m + 2, 2) - 1) * (4 * pow(m + 2, 2) - 9) * (4 * pow(m + 2, 2) - 25)

    denominator != 0
         ? numerator / denominator
         : 0

hwma(src, termsNumber) =>
    sum = 0.0
    weightSum = 0.0
    
    termMult = (termsNumber - 1) / 2

    for i = 0 to termsNumber - 1
        weight = getWeight(termMult, i - termMult)
        sum := sum + nz(src[i]) * weight
        weightSum := weightSum + weight

    sum / weightSum

//Functions from @JayRogers / CryptoNTez / Me :)
variant(type, src, len, lsmaOffset, almaOffset, almaSigma) =>
    v1 = sma(src, len)                                                  // Simple
    v2 = ema(src, len)                                                  // Exponential
    v3 = 2 * v2 - ema(v2, len)                                          // Double Exponential
    v4 = 3 * (v2 - ema(v2, len)) + ema(ema(v2, len), len)               // Triple Exponential
    v5 = wma(src, len)                                                  // Weighted
    v6 = vwma(src, len)                                                 // Volume Weighted
    v7 = na(v5[1]) ? sma(src, len) : (v5[1] * (len - 1) + src) / len    // Smoothed
    v8 = wma(2 * wma(src, len / 2) - wma(src, len), round(sqrt(len)))   // Hull
    v9 = linreg(src, len, lsmaOffset)                                   // Least Squares
    v10 = alma(src, len, almaOffset, almaSigma)                         // Arnaud Legoux
    v11 = kama(src, len)                                                // KAMA
    v12 = mama(src, len)                                                // MAMA
    ema1=ema(src, len)
    ema2=ema(ema1, len)
    v13 = t3(src, len)                                                  // T3
    v14 = ema1+(ema1-ema2)                                              // Zero Lag Exponential
    v15 = hwma(src, len)                                                // Henderson Moving average thanks to  @everget
    ahma = 0.0
    ahma := nz(ahma[1]) + (src - (nz(ahma[1]) + nz(ahma[len])) / 2) / len //Ahrens Moving Average 
    v16 = ahma
        
    type=="EMA"?v2 : type=="DEMA"?v3 : type=="TEMA"?v4 : type=="WMA"?v5 : type=="VWMA"?v6 :
     type=="SMMA"?v7 : type=="Hull"?v8 : type=="LSMA"?v9 : type=="ALMA"?v10 : type=="KAMA"?v11 :
     type=="MAMA"?v12 : type=="T3"?v13 : type=="ZEMA"?v14 : type=="HWMA"?v15 : type=="AHMA"?v16 : v1

// ----- Main Logic ----- //
// ----- RSI
rsi            = rsi(rsiSource, rsiLength)
lineOverbought = hline(rsiOverbought,  color = red ,                    title="Overbought Level 2")
lineOversold   = hline(rsiOversold,    color = lime ,                   title="Oversold Level 2")
lineBullish    = hline(rsiOverbought1, color = red,  linestyle=dotted,  title="Overbought Level 1")
lineBearish    = hline(rsiOversold1,   color = lime, linestyle=dotted,  title="Oversold Level 1")
lineMid        = hline(50,             color = black,                   title="Mid Line")

// ----- RSI/EMA
ema_base     = variant(rsiSignalType, rsi, rsiSignalLen, lsmaOffset2, almaOffset2, almaSigma2)

// ----- BB Calculation 
bb_basis     = variant(bb_type, rsi, bb_length, lsmaOffset, almaOffset, almaSigma)
bb_dev       = bb_std * stdev(rsi, bb_length)
bb_const     = rsi * bb_plus / 100
bb_upper     = bb_basis + bb_dev + bb_const
bb_lower     = bb_basis - bb_dev - bb_const

bbUpPlot  = plot(bb_upper , "Upper Band", color=#C0C0C0, linewidth = 2, transp=100)
bbLowPlot = plot(bb_lower,  "Lower Band", color=#C0C0C0, linewidth = 2, transp=100)
midColor  =  bb_basis<bb_basis[1] ? red : lime
bbMidPlot = plot(bb_basis,  "Mid Band",   color=midColor,   linewidth = 4, transp=45)

fillBandsTop = fill(bbUpPlot,  bbMidPlot, color=#C0C0C0, title="Fill Bands Top", transp=70)
fillBandsBot = fill(bbLowPlot, bbMidPlot, color=#C0C0C0, title="Fill Bands Bottom", transp=70)

// ----- Sharkfins / Hoooks
rsiUp   = rsi + 7
rsiDown = rsi - 7
shark   = input(false,"Show Sharkfins?")

// Sharkfin Breakout out of the Bands
plotshape(shark?( bb_upper<rsi and rsiOverbought<rsi )?rsiUp:na:na, title="SharkFin/Hook Short+", color=red,     style=shape.triangledown, location=location.top, transp=15, size=size.tiny)
plotshape(shark?( bb_upper<rsi and rsiOverbought>rsi )?rsiUp:na:na, title="SharkFin/Hook Short+", color=orange,  style=shape.triangledown, location=location.top, transp=15, size=size.tiny)

plotshape(shark?( bb_lower>rsi and rsiOversold>rsi )?rsiDown:na:na, title="SharkFin/Hook Long+", color=lime,    style=shape.triangleup, location=location.bottom, transp=15, size=size.tiny)
plotshape(shark?( bb_lower>rsi and rsiOversold<rsi )?rsiDown:na:na, title="SharkFin/Hook Long+", color=orange,  style=shape.triangleup, location=location.bottom, transp=15, size=size.tiny)

sharkCross   = input(true,"Show Sharkfin Cross Backs ?")
// BackIntoTheBand
plotshape(sharkCross?( crossover(bb_upper, rsi) and rsiOverbought<rsi )?bb_upper:na:na, title="SharkFin/Hook Cross Short+ (Oversold)", color=red, style=shape.xcross, location=location.absolute, transp=15, size=size.small)
plotshape(sharkCross?( crossover(bb_upper, rsi) and rsiOverbought>rsi )?bb_upper:na:na, title="SharkFin/Hook Cross Short+ (Not Oversold)", color=orange, style=shape.xcross, location=location.absolute, transp=15, size=size.small)

plotshape(sharkCross?( crossunder(bb_lower, rsi) and rsiOversold>rsi )?bb_lower:na:na, title="SharkFin/Hook Cross Long+ (Overbought) ", color=lime,    style=shape.xcross, location=location.absolute, transp=15, size=size.small)
plotshape(sharkCross?( crossunder(bb_lower, rsi) and rsiOversold<rsi )?bb_lower:na:na, title="SharkFin/Hook Cross Long+ (Not Overbought)", color=orange,  style=shape.xcross, location=location.absolute, transp=15, size=size.small)

//MA Cross
maCross   = input(true,"Show RSI / MA Cross?")
plotshape(maCross?( crossunder (rsi, ema_base) and rsi<rsiOversold1   )?rsi:na:na, title="Signal MA Cross Long+",  color=lime, style=shape.circle, location=location.absolute, transp=15, size=size.tiny)
plotshape(maCross?( crossunder (rsi, ema_base) and rsi>rsiOverbought1 )?rsi:na:na, title="Signal MA Cross Short+", color=red,  style=shape.circle, location=location.absolute, transp=15, size=size.tiny)

//Mid Cross
senCross   = input(true,"Show MA / Sentiment Cross?")
plotshape(senCross?( crossover (ema_base, bb_basis) )?bb_basis:na:na, title="Sentiment Cross Long+",  color=lime, style=shape.circle, location=location.absolute, transp=15, size=size.small)
plotshape(senCross?( crossunder(ema_base, bb_basis) )?bb_basis:na:na, title="Sentiment Cross Short+", color=red,  style=shape.circle,  location=location.absolute, transp=15, size=size.small)

plot(ema_base, color=black, transp=3,   linewidth = 1 , title = "TDI Signal Line")

//RSI PLOT
rsiColor = rsi > rsiOverbought ? lime : rsi < rsiOversold ? red : black
rsiPlot  = plot(rsi, color=rsiColor, transp=0,   linewidth = 3 , title = "RSI"          )
plot(ema(rsi,2),     color=rsiColor, transp=35,  linewidth = 1 , title = "RSI Shadow 2" )
plot(ema(rsi,3),     color=rsiColor, transp=55,  linewidth = 1 , title = "RSI Shadow 3" )
