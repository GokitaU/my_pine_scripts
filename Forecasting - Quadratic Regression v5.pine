// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© capissimo

//@version=5
indicator('Forecasting: Quadratic Regression v5', '', true, max_bars_back = 5000, max_lines_count=400, max_labels_count=400)

// This is a modification of my earlier script that can be found at
// https://www.tradingview.com/script/YnoXd2AY-forecasting-quadratic-regression/

//-------------------- Inputs

ptype = input.string('Close', 'Dataset', options=['Open', 'High', 'Low', 'Close', 'HL2', 'OC2', 'OHL3', 'HLC3', 'OHLC4'])
p = input.int(5, 'QReg lag |2..n|', minval=2)
sp = input.int(5, 'Season', options=[5, 21, 63, 126, 252, 3, 4, 6, 7, 8, 9, 10, 13, 15, 26, 32, 34])
fp = input.int(10, 'Forecasted Periods |2..n|', minval=2)
mth = input.string('Seasonal Naive', 'Method', options=['Seasonal Naive', 'Simple Mean', 'Simply Naive'])
holding_p = input.int(2, 'Holding Period |1..n|', minval=1)
startYear = input.int(2020, 'Start Year |2000..n|', minval=2000)
ftype = input.string('Volatility', 'Filter by', options=['Volatility', 'Volume', 'Both', 'None'])
minatr = input.int(1, 'Min ATR Lag |1..n|', minval=1)
maxatr = input.int(10, 'Max ATR Lag |1..n|', minval=1)
vol = input.int(49, 'Volume Lag  |1..n|', minval=1)

//-------------------- System Variables

var int BUY = -1
var int SELL = 1
var int HOLD = 0

//-------------------- Helper Series

var int signal = HOLD
var int hp_counter = 0  //-- holding period counter

//-------------------- Custom functions

volumeBreak(thres) =>
    ta.hma(ta.rsi(volume, 14), 10)
volatilityBreak(volmin, volmax) =>
    ta.atr(volmin) > ta.atr(volmax)

simple_mean(x, p) =>
    x[1] + ta.sma(ta.change(x, p), p)
simply_naive(x, p) =>
    ta.sma(x, p)[1]
seasonal_naive(x, p) =>
    x[p] + ta.sma(ta.change(x, p), p)

//-------------------- Logic

base = ptype == 'Open' ? open : ptype == 'High' ? high : ptype == 'Low' ? low : ptype == 'Close' ? close : ptype == 'HL2' ? (high + low) / 2 : ptype == 'OC2' ? (open + close) / 2 : ptype == 'OHL3' ? (open + high + low) / 3 : ptype == 'HLC3' ? (high + low + close) / 3 : (open + high + low + close) / 4

src = base

filter = ftype == 'Volatility' ? volatilityBreak(minatr, maxatr) : ftype == 'Volume' ? volumeBreak(vol) : ftype == 'Both' ? volatilityBreak(minatr, maxatr) and volumeBreak(vol) : true

//== Core
x1 = bar_index
x2 = math.pow(x1, 2)

s11 = ta.cum(x2) - math.pow(ta.cum(x1), 2) / bar_index
s12 = ta.cum(x1 * x2) - ta.cum(x1) * ta.cum(x2) / bar_index
s22 = ta.cum(math.pow(x2, 2)) - math.pow(ta.cum(x2), 2) / bar_index
sy1 = ta.cum(base * x1) - ta.cum(base) * ta.cum(x1) / bar_index
sy2 = ta.cum(base * x2) - ta.cum(base) * ta.cum(x2) / bar_index

x1ma = ta.sma(x1, p)
x2ma = ta.sma(x2, p)
yma = ta.sma(base, p)

b2 = (sy1 * s22 - sy2 * s12) / (s22 * s11 - math.pow(s12, 2))
b3 = (sy2 * s11 - sy1 * s12) / (s22 * s11 - math.pow(s12, 2))
b1 = yma - b2 * x1ma - b3 * x2ma
qreg = b1 + b2 * x1 + b3 * x2

forecast = mth == 'Seasonal Naive' ? seasonal_naive(qreg, sp) : mth == 'Simple Mean' ? simple_mean(qreg, sp) : simply_naive(qreg, sp)

if year(time) >= startYear
    signal := base > qreg and filter ? BUY : base < qreg and filter ? SELL : nz(signal[1])  // HOLD
    signal
//==

changed = ta.change(signal)
hp_counter := changed ? 0 : hp_counter + 1

startLongTrade = changed and signal == BUY
startShortTrade = changed and signal == SELL
endLongTrade = signal == BUY and hp_counter == holding_p and not changed or changed and signal == SELL
endShortTrade = signal == SELL and hp_counter == holding_p and not changed or changed and signal == BUY

clr = qreg > forecast ? color.red : qreg < forecast ? color.green : color.blue

//-------------------- Visualization

plot(qreg, '', color.new(color.white, 0), 1)

var line fl = na
if barstate.islast
    line.delete(fl[1])
    fl := line.new(time, qreg, time + 60 * 60 * 24 * fp, forecast, xloc.bar_time, extend=extend.none, style=line.style_solid, color=clr, width=3)
    fl

//------------------ Rendering

plotshape(startLongTrade ? src : na, 'Buy', shape.triangleup, location.belowbar, color.new(color.lime, 0), size=size.tiny)
plotshape(startShortTrade ? src : na, 'Sell', shape.triangledown, location.abovebar, color.new(color.red, 0), size=size.tiny)
plotshape(endLongTrade ? src : na, 'StopBuy',  shape.flag, location.top, color.new(color.lime, 0), size=size.tiny)
plotshape(endShortTrade ? src : na, 'StopSell', shape.flag, location.bottom, color.new(color.red, 0), size=size.tiny)


//-------------------- Notification

if changed and signal == BUY
    alert('Buy Alert', alert.freq_once_per_bar)  // alert.freq_once_per_bar_close
if changed and signal == SELL
    alert('Sell Alert', alert.freq_once_per_bar)

alertcondition(startLongTrade, 'Buy Alert', 'Go Long!')
alertcondition(startShortTrade, 'Sell Alert', 'Go Short!')

//-------------------- Backtest

show_info = input(true, 'Performance')
lot_size = input.float(1, 'Lot Size', options=[0.01, 0.1, 0.2, 0.3, 0.5, 1, 2, 3, 5, 10, 20, 30, 50, 100, 1000])
ubase = input(false, 'Use Base Price?')

tbase = (time - time[1]) / 1000
tcurr = (timenow - time_close[1]) / 1000
barlife = tcurr / tbase

//bidask = ubase ? (open + high + low) / 3 : close
bidask = ubase ? (open + close + high + low) / 4 : close


var float start_long_trade = 0.
var float long_trades = 0.
var float start_short_trade = 0.
var float short_trades = 0.
var int wins_long = 0
var int wins_short = 0
var int long_trade_count = 0
var int short_trade_count = 0


if startLongTrade
    start_long_trade := bidask
    start_long_trade

if endLongTrade
    long_trade_count := 1
    diff_long = bidask - start_long_trade
    wins_long := diff_long > 0 ? 1 : 0
    long_trades := diff_long * lot_size
    long_trades
    
if startShortTrade
    start_short_trade := bidask
    start_short_trade

if endShortTrade
    short_trade_count := 1
    diff_short = start_short_trade - bidask
    wins_short := diff_short > 0 ? 1 : 0
    short_trades := diff_short * lot_size
    short_trades
    
    
cumreturn_long = ta.cum(long_trades)  //-- cumulative return long
cumreturn_short = ta.cum(short_trades)  //-- cumulative return short
total_long_trades = ta.cum(long_trade_count)
total_short_trades = ta.cum(short_trade_count)
total_wins_long = ta.cum(wins_long)
total_wins_short = ta.cum(wins_short)
total_losses_long = total_long_trades - total_wins_long == 0 ? 1 : total_long_trades - total_wins_long
total_losses_short = total_short_trades - total_wins_short == 0 ? 1 : total_short_trades - total_wins_short


//------------------- Information

var label lbl = na

info = '\n\n  CR Long: '+str.tostring(cumreturn_long,'#.#') 
       +'\n  Trades long: ' + str.tostring(total_long_trades,'#')
       +'\n  Win/Loss: '+ str.tostring(total_wins_long/total_losses_long,'#.##')
       +'\n  Winrate Long: '+str.tostring(total_wins_long/total_long_trades,'#.#%')
       +'\n\n  CR Short: '+str.tostring(cumreturn_short,'#.#')
       +'\n  Trades Short: ' + str.tostring(total_short_trades,'#')
       +'\n  Win/Loss: '+ str.tostring(total_wins_short/total_losses_short,'#.##')
       +'\n  Winrate Short: '+str.tostring(total_wins_short/total_short_trades,'#.#%') 
       +'\n\n  Bar Time: ' + str.tostring(tcurr / tbase, '#.#%')

if show_info and barstate.islast 
    lbl := label.new(bar_index, bidask, info, xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_label_left, color.white, size.small, text.align_left)
    label.delete(lbl[1])

